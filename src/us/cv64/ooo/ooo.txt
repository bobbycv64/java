Slide 1 - this is a presentation I gave at the Phoenix Java Users Group in 1999.  This presentation is very old, however, the concepts are still the same today.  Here's a personal note.  If I want to learn something, I document and write up what I have learned and then share what I have learned.  I learn better by teaching.  I have a saying, if you think you understand something, then teach that something and you will quickly realize, there are a lot of questions you didn't think about.

My previous development experience is from the Structured Programming, for example:  Fortran and C.  I wrote a little C++, however, everyone said my C++ really looked like C.  I did not understand Object Oriented Programming, the advantages, the techniques or concepts.

I had an instructor name Dr. Gary Berg who wrote up the secrets on Comprehension, here are a few.  People remember 16% of what they read, 20% of what they see, eventually 90% of what they read, see, told, respond to and do directed functions.  I will come back to comprehension in a minute.

Slide 2 - Eric Richardson was my Mentor for my Master Thesis.  Eric truely understodd Object Oriented Programming and his code was always a lot smaller than everyone elses because he took advantage of all the possiblities that were available.  If I could write a program in 100 lines, Eric could do the same functionality in 10 lines.  That much better.  Eric worked smarter and not harder.  The code was a more maintainable and comprehensible.

Slide 3 - Eric gave me a 1st edition of David Taylor's Book, Object Oriented Technology, A Manager's Guide.  The 1st edition was less than 100 pages and best part, mostly PICTURES.  Going back to Dr Berg, people respond well to reading and seeing.  The Internet is full of excellent videos that explain technologies today.

Slide 4 - So there is the software crisis, corporations are drowing in data, meaning, they have all the data, however, corporations didn't need data, they needed information.  Many people mix these two terms up as they are the same, they are not.  Data is raw, where as information is processed data with an answer to the question.

Yes, we have the same issues today on software being delivered late or over budget.  I continue to see this happening unless companies continue to invest in the newer technologies with well architected requirements.

Slide 5 - Structured Programming was simply functional decomposition.  Then CASE tools made their entrance to help speed up development and later the 4th Generation Languages.  Simple programs to well understood problems, but what about the difficult problems?

Slide 6 - First issue - Data within Programs.  Sharing data is a violation of modular programming, which requires that modules be as independent as possible.  This never happened.  Data was open to all.  The diagram below shows that Module 1 can go directly to Module 2 or Module 3's data and modify their data.

Slide 7 - Information Hiding - one Object Oriented idea, information hiding.  Modules are restricted access and have to access the data through the owners data, for example.  If Module 1 wants Module 2's data, Module 2 becomes the proxy and authority to that data.

Slide 8 - There are the various data modules, we are going to concentrate on the Object Module.

Slide 9 - Surprisingly, the Object Model is very old.  Simula was the first Object Oriented Language from the 1960's.  The focus was on data in applications instead of methods.

Slide 10 - Definitions - there are several parts to the Object Model and 4 definitions that must be understood before continuing with an Object Oriented Programming Language.  The presentation is going to cover all 4 definitions.  Starting off with Classes, a Class is a collection of attributes and methods.  Think of a Class as a TYPE of thing.  A Lamp, Vehicle.  Objects are an instance of a Class, a kitchen lamp, bedroom lamp.  Lamp is the type a Class and an object is an instance of a Lamp.  Another example, there are Vehicles, which are types or classes and objects of Vehicles, esters vehicle, bobbys vehicle.  Next are methods, simply functions that operate on the attributes and variables.  Finally attributes are state of something, a red light, a white light, a light that is on or off.

Slide 11 - Coding Conventions, most software (computing, database, etc.) have coding conventions.  Why are coding conventions so important, here's the bottom line.  Everyone is on the same page, THAT'S ALL.  If everyone has the same rules and practices, then code is maintainable and this is why previous languages, the rule was everyone for themselves.  Java has the following coding conventions.

READ SLIDE.

Slides 11 - 26

READ SLIDES
